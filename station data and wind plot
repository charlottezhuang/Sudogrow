import datafetcher_m
import os
import json
import requests

import dateutil.parser
import datetime
import numpy as np
import requests
import matplotlib.pyplot as plt
import datetime


class MonitoringStation:
    """This class represents a river level monitoring station"""

    def __init__(self, gateway,latitude,longtitude, wind_speed,temperature,
                 dew_point, wind_direction,relative_humidity, precipitation, time, spray = True):

       
        self.latitude = latitude
        self.longtitude=longtitude
        self.gateway = gateway
        
        self.wind_speed = wind_speed
        self.temperature = temperature
        self.dew_point = dew_point
        self.wind_direction = wind_direction
        self.relative_humidity = relative_humidity
        self.precipitation = precipitation
        self.spray=spray
        self.time = time
        
    def forbid_spray(self):
        self.spray=False

    def __repr__(self):
        
        
        d  = "gateway   :             {}\n".format(self.gateway)
        d += "latitude   :            {}\n".format(self.latitude)
        d += "longtitude   :          {}\n".format(self.longtitude)
        
        d += "wind_speed   :          {}\n".format(self.wind_speed)
        d += "temperature   :         {}\n".format(self.temperature)
        d += "dew_point   :           {}\n".format(self.dew_point)
        d += "wind_direction   :      {}\n".format(self.wind_direction)
        d += "relative_humidity   :   {}\n".format(self.relative_humidity)
        d += "precipitation   :       {}\n".format(self.precipitation)
        d += "time   :                {}\n".format(self.time)
        
        return d
    
    

def build_station_list(use_cache=True):
    """Build and return a list of all river level monitoring stations
    based on data fetched from the Environment agency. Each station is
    represented as a MonitoringStation object.

    The available data for some station is incomplete or not
    available.

    """

    # Fetch station data
    data = datafetcher_m.fetch_station_list(use_cache)

    # Build list of MonitoringStation objects
    stations = []
    for e in data["data"]:
        
        #print(e['location']['longitude'],)
        # Extract town string (not always available)
        
        
        # Extract river name (not always available)
       
        s = MonitoringStation(gateway=e['nodes'][0]['gateway'],
                                  latitude=e['location']['latitude'],
                                  longtitude=e['location']['longitude'],
                                  wind_speed = None,
                                  temperature = None,
                                  dew_point = None
                                  ,wind_direction = None
                                  ,relative_humidity = None,precipitation = None
                                  ,time = None)
        stations.append(s)
        
    return stations




def update_station_period(station, start_date = "2018-04-05",end_date = '2018-04-06'):
    '''
    This function output a list of dictionary of measurement of a certain station
    key: date_time
    item: 
    '''
    
    station_all_data = dict()
    A = datafetcher_m.fetch_data_of_the_station(start_date, end_date, station.gateway)
    for n in range(0,len(A)):
        for i in A[n]["data"]:
                
            station_all_data[i['date_time']] = i
    #print(station_all_data) 
    return station_all_data

#print(type(build_station_list()[0]))
B = build_station_list()

#print(update_station_period(B[0]))

'''
A = update_station_period(build_station_list()[0]) #A is a dictionary of dictionary
for member in A:
    print(member, A[member],  '\n')
'''

def update_stations_data(stations, start_date =  "2018-04-05", end_date = '2018-04-06'):
    """
    output: a 2darray (time, station)
    """
    stations = build_station_list()
    
    station_data_with_time = dict()
    time_list = []
    for member in update_station_period(stations[0]):
        time_list.append(member)
    i = 0
    for time_member in time_list:
        
        stations_list = []#list of station objects with same time and different actual stations
    # Attach latest reading to station objects
        i += 1
        if i >= 2:
            break
        
        j = 0
        for station in stations:
            j += 1
            
            new_data = update_station_period(station) #is a dictionary of dictionary
            
            s = station
            try:
                s.time = time_member
            
                #print(new_data[time_member])
                s.wind_speed = new_data[time_member]['wind_speed']
                s.temperature = new_data[time_member]['temperature']
                s.dew_point = new_data[time_member]['dew_point']
                s.wind_direction = new_data[time_member]['wind_direction']
                s.relative_humidity = new_data[time_member]['relative_humidity']
                s.precipitation = new_data[time_member]['precipitation']
            except:
                pass
                
            stations_list.append(s)
            
        station_data_with_time[time_member] = stations_list
        
    return station_data_with_time


station_number = 1

def plot_wind_speed(station_number):
    wind_speed_list = []
    station_all_data = update_station_period(B[station_number])
    for i in station_all_data:
        n = station_all_data[i]
        wind_speed_list.append(n['wind_speed'])    
    num_points = len(wind_speed_list)
    time = np.linspace(0, 0.25*num_points, num=num_points)
    f = plt.figure()
    plt.plot(time[-80:],wind_speed_list[-80:])
    plt.xlabel('$time(hours)$')
    plt.ylabel('$windspeed(mph)$')
    plt.plot(np.unique(time[-20:]), np.poly1d(np.polyfit(time[-20:], wind_speed_list[-20:], 1))(np.unique(time[-20:])))
    f.savefig('windspeed%s.pdf'%station_number)#%后面加上list【index】
    url = 'windspeed%s.pdf'%station_number
    return url


print(plot_wind_speed(1))
